{"language":"Solidity","sources":{"src/FluidkeyHydrator.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n *                  !\n *                 /@\\\n *                /@@@\\\n *               { ^_^ }\n *               \\@@@@@/\n *                 \"\"\"\n */\n\n/**\n * @title FluidkeyHydrator v0.1\n * @author Fluidkey (fluidkey.com)\n * @notice This contract deploys 1/1 Safes with minimal calldata.\n *         It takes an address in bytes32 and inflates it to deploy\n *         a 1/1 v1.3.0 Safe controlled by the passed address.\n */\ncontract FluidkeyHydrator {\n    function deploySafe(bytes32 signerAddress) public {\n        bytes memory dataChunk1 =\n            hex\"1688f0b9000000000000000000000000d9db270c1b5e3bd161e8c8503c55ceabee709552000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000\";\n        bytes memory dataChunk2 =\n            hex\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\n        bytes memory data = abi.encodePacked(dataChunk1, signerAddress, dataChunk2);\n\n        (bool success,) = address(0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2).call(data);\n        require(success, \"Failed to deploy Safe\");\n    }\n}\n"}},"settings":{"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":1000},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","viaIR":true,"libraries":{}}}