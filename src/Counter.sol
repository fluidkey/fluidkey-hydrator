// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.0 <0.9.0;

contract MyContract {
    event CallData(bytes data);

    function deploySafe(address _to) external {
        // Prepare calldata
        bytes memory data =
            hex"1688f0b9000000000000000000000000d9db270c1b5e3bd161e8c8503c55ceabee709552000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000020d4ae941f4e52465e7a454e86f97e9b6f69f5e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        // Insert the address into the calldata
        for (uint256 i = 0; i < 20; i++) {
            data[436 + i] = bytes1(uint8(uint160(_to) >> (8 * (19 - i))));
        }

        // Call the contract
        (bool success,) = address(0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2).call(data);
        require(success, "External call failed");
    }

    function decompressHuff(bytes calldata _compressed) external {
        (bool ok,) = address(0x8C5CF0a201C1F0C1517a23699BE48070724e7a70).call(_compressed);
        require(ok, "Decompression failed");
    }
}
